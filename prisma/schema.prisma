generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cars {
  id           Int       @id @default(autoincrement())
  manufacture  String?   @db.VarChar
  type         String?   @db.VarChar
  license_no   String?   @db.VarChar
  seat         Int?
  baggage      Int?
  transmission String?   @db.VarChar
  year         String?   @db.VarChar
  name         String?   @db.VarChar
  description  String?
  is_driver    Boolean?
  is_available Boolean?  @default(true)
  image        String?
  price        Int?
  created_dt   DateTime? @default(now()) @db.Timestamp(6)
  updated_dt   DateTime? @updatedAt //diubah dari @db.Timestamp(6) ke @updatedAt agar auto update
  created_by   String?   @db.VarChar
  updated_by   String?   @db.VarChar
  order        order[]
}

model order {
  id         Int       @id @default(autoincrement())
  order_no   String    @unique @db.VarChar
  user_id    Int
  car_id     Int
  start_time DateTime? @db.Timestamp(6)
  end_time   DateTime? @db.Timestamp(6)
  total      Float?
  is_driver  Boolean?
  is_expired Boolean?
  status     String?   @db.VarChar
  created_dt DateTime? @default(now()) @db.Timestamp(6)
  updated_dt DateTime? @updatedAt //diubah dari @db.Timestamp(6) ke @updatedAt agar auto update
  created_by String?   @db.VarChar
  updated_by String?   @db.VarChar
  cars       cars?     @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             Int       @id @default(autoincrement())
  full_name      String?   @db.VarChar
  email          String    @unique @db.VarChar(30)
  password       String    @db.VarChar
  address        String?   @db.VarChar
  gender         String?   @db.VarChar
  avatar         String?   @db.VarChar
  phone_number   String?   @unique @db.VarChar
  driver_license String?
  birthdate      String?
  role_id        Int
  created_dt     DateTime? @default(now()) @db.Timestamp(6)
  updated_dt     DateTime? @updatedAt //diubah dari @db.Timestamp(6) ke @updatedAt agar auto update
  created_by     String?   @db.VarChar
  updated_by     String?   @db.VarChar
  order          order[]
  role           roles     @relation(fields: [role_id], references: [id], onDelete: Cascade) //Cascade adalah jika data role dihapus maka di users juga dihapus
}

model roles {
  id         Int       @id @default(autoincrement())
  role       String    @unique
  created_dt DateTime? @default(now()) @db.Timestamp(6)
  updated_dt DateTime? @updatedAt
  created_by String?   @db.VarChar
  updated_by String?   @db.VarChar
  access     access[]
  user       users[]
}

model menus {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  title       String
  icon        String?
  path        String?
  is_submenu  Boolean   @default(false)
  parent_id   Int?
  permissions String[]
  created_dt  DateTime? @default(now()) @db.Timestamp(6)
  updated_dt  DateTime? @updatedAt
  created_by  String?   @db.VarChar
  updated_by  String?   @db.VarChar
  submenu     menus?    @relation("submenu", fields: [parent_id], references: [id])
  parent      menus[]   @relation("submenu")
  access      access[]
}

model access {
  id         Int       @id @default(autoincrement())
  role_id    Int
  menu_id    Int
  visible    Boolean   @default(true)
  grant      Json
  role       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  menu       menus     @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  created_dt DateTime? @default(now()) @db.Timestamp(6)
  updated_dt DateTime? @updatedAt
  created_by String?   @db.VarChar
  updated_by String?   @db.VarChar
}
